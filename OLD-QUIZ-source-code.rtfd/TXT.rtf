{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 THIS WAS ALL IN \'93Quiz\'94 folder, which was inside \'93src\'94 folder:\
- - - - - \
AnswerOption.js\
\
import React from 'react';\
import PropTypes from 'prop-types';\
\
//THIS COMPONENT DISPLAYS ANSWER OPTIONS...\
function AnswerOption(props) \{\
  console.log(props.selectedAnswer, props.answerContent);\
\
  let className = "radioCustomButton";\
  if (props.correctAnswer === true && props.answer === props.selectedAnswer) \{\
    className = "correctAnswer radioCustomButton"\
  \} else if (props.correctAnswer === false && props.answer === props.selectedAnswer)\{\
    className = "falseAnswer radioCustomButton"\
  \}\
\
\
  //props.selectedAnswer is the answer selected by user.\
  //props.answerContent is all of the possible answers.\
  return (\
    <li className="answerOption">\
      <input\
        type="radio"\
        className=\{className\} /*changed to \{classname\} with above definition*/\
        name="radioGroup"\
        checked=\{props.selectedAnswer === props.answerContent\}\
        id=\{props.answerContent\}\
        value=\{props.answerContent\}\
        onChange=\{props.onAnswerSelected\}\
      />\
      <label className="radioCustomLabel" htmlFor=\{props.answerContent\}>\
        \{props.answerContent\}\
      </label>\
    </li>\
  );\
\}\
\
\
\
export default AnswerOption;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 - - - - - \
MakeQuiz.js\
\
import React from 'react';\
import PropTypes from 'prop-types';\
import Question from './Question';\
import QuestionCount from './QuestionCount';\
import AnswerOption from './AnswerOption';\
import \{ CSSTransitionGroup \} from 'react-transition-group';\
\
\
//THIS COMPONENT SHOWS HOW THE QUIZ IS DISPLAYED: QUESTION AND ANSWERS, BUTTONS, AND COUNT...\
function MakeQuiz(props) \{\
\
  //renders an AnswerOption component for each answer option defined in state...\
  function renderAnswerOptions(key) \{\
    return (\
      <AnswerOption\
        key=\{key.content\}\
        answerContent=\{key.content\}\
        selectedAnswer=\{props.selectedAnswer\} //was \{key.type\} originally. changed it to \{key.correct\}\
       \
        questionId=\{props.questionId\}\
        onAnswerSelected=\{props.onAnswerSelected\}\
        correctAnswer=\{props.correctAnswer\}\
      />\
    );\
  \}\
\
  return (\
    <React.Fragment>\
      <CSSTransitionGroup\
        className="container"\
        component="div"\
        transitionName="fade"\
        transitionEnterTimeout=\{800\}\
        transitionLeaveTimeout=\{500\}\
        transitionAppear\
        transitionAppearTimeout=\{500\}\
      >\
\
        <div key=\{props.questionId\}>\
          <QuestionCount\
            counter=\{props.questionId\}\
            total=\{props.questionTotal\}\
          />\
          <Question content=\{props.question\} />\
          <ul className="answerOptions">\
            \{props.answerOptions.map(renderAnswerOptions)\}\
          </ul>\
\
\
\
          <button onClick=\{props.onExplanation\}>Show Explanation</button>\
\
          <button onClick=\{props.onAnswerSelected\}>Next</button>\
\
\
        </div>\
      </CSSTransitionGroup>\
    </React.Fragment>\
  );\
\}\
\
\
\
export default MakeQuiz;\
\
\
\
- - - - - \
Question.js\
\
import React from 'react';\
import PropTypes from 'prop-types';\
\
function Question(props) \{\
  return (\
    <h2 className="question">\{props.content\}</h2>\
  );\
\}\
\
\
\
export default Question;\
\
\
- - - - - \
QuestionCount.js\
\
import React from 'react';\
import PropTypes from 'prop-types';\
\
function QuestionCount(props) \{\
  return (\
    <div className="questionCount">\
      Question <span>\{props.counter\}</span> of <span>\{props.total\}</span>\
    </div>\
  );\
\}\
\
QuestionCount.propTypes = \{\
  counter: PropTypes.number.isRequired,\
  total: PropTypes.number.isRequired\
\};\
\
export default QuestionCount; \
\
\
- - - - - \
Quiz.js\
\
import React from 'react';\
import \{ Route, Link, Switch, Router \} from 'react-router-dom';\
import MakeQuiz from './MakeQuiz';\
import quizQuestions from '../api/quizQuestions';\
import Result from './Result';\
\
//THIS COMPONENT CONTAINS THE QUIZ FUNCTIONALITY...\
class Quiz extends React.Component \{\
  constructor(props) \{\
    super(props);\
\
    this.state = \{\
      counter: 0,\
      questionId: 1,\
      question: '',\
      answerOptions: [],\
      answersCount: \{\},\
      result: ''\
    \}\
    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\
  \}\
\
  componentDidMount() \{\
    //shuffle function commented out for now...\
    //const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\
\
    this.setState(\{\
      question: quizQuestions[0].question,\
      answerOptions: quizQuestions[0].answers,\
      //if shuffle is on, use this next one...\
      //answerOptions: shuffledAnswerOptions[0]\
    \});\
  \}\
\
  // shuffleArray(array) \{\
  //   var currentIndex = array.length, temporaryValue, randomIndex;\
\
  //   //while there remains elements to shuffle...\
  //   while (0 !== currentIndex) \{\
\
  //     //pick a remaining element...\
  //     randomIndex = Math.floor(Math.random() * currentIndex);\
  //     currentIndex -= 1;\
\
  //     //and swap it with the current element.\
  //     temporaryValue = array[currentIndex];\
  //     array[currentIndex] = array[randomIndex];\
  //     array[randomIndex] = temporaryValue;\
  //   \}\
  //   return array;\
  // \}\
\
\
  //check whether answer is right or wrong, and change state\
  setUserAnswer = (answer) => \{ //<-- 'answer' = value of the selected answer ('Nintendo', 'Microsoft',...)\
    this.setState((state) => (\{\
      answersCount: \{\
        ...state.answersCount,\
        [answer]: (state.answersCount[answer] || 0) + 1\
      \},\
      answer: answer\
\
    \}));\
    console.log(answer);\
\
    let correct = quizQuestions.answers.correct;\
    if (this.answer === correct) \{\
      console.log('selected correct')\
    \} else \{\
      console.log('selected incorrect')\
    \}\
    console.log(answer);\
  \}\
\
  //to show red or green...,\
  // handleExplanation = (event) => \{\
  //   console.log('hello');\
  //   this.setUserAnswer(event.currentTarget.value);\
  //   const answer = event.currentTarget.value; //answer is 'undefined'???\
\
  //   if (this.state.answerOptions.find(option => option.content === answer && option.correct === true)) \{\
  //     this.setState(\{\
  //       correctAnswer: true\
  //     \})\
  //   \} else \{\
  //     this.setState(\{\
  //       correctAnswer: false\
  //     \})\
  //   \}\
  // \}\
\
  //when value changes, this updates value\
  handleAnswerSelected = (event) => \{\
    this.setUserAnswer(event.currentTarget.value);\
    \
\
  \}\
  //\
  //change to two possible states, question or feedback... count correct/incorrect answers\
  //this.state.answer is selected answer, and this.state.answerOptions.correct is the correct answer\
  onAnswerSubmitted = (event) => \{\
  if (this.state.questionId < quizQuestions.length) \{\
    setTimeout(() => this.setNextQuestion(), 300);\
    console.log('made it to handleAnswerSelected');\
  \} else \{\
    setTimeout(() => this.setResults(this.getResults()), 300);\
  \}\
\}\
\
    setNextQuestion = () => \{\
      console.log('hello world');\
      const counter = this.state.counter + 1;\
      const questionId = this.state.questionId + 1;\
      this.setState(\{\
        counter: counter,\
        questionId: questionId,\
        question: quizQuestions[counter].question,\
        answerOptions: quizQuestions[counter].answers,\
        answer: '',\
        correctAnswer: null\
      \});\
    \}\
\
    getResults() \{\
      const answersCount = this.state.answersCount;\
      const answersCountKeys = Object.keys(answersCount);\
      console.log(answersCountKeys);\
      const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\
      const maxAnswerCount = Math.max.apply(null, answersCountValues);\
\
      return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\
    \}\
\
    setResults = (result) => \{\
      if (result.length === 1) \{\
        this.setState(\{ result: result[0] \});\
      \} else \{\
        this.setState(\{ result: 'Undetermined' \});\
      \}\
    \}\
\
    renderQuiz() \{\
      return (\
        <MakeQuiz\
          selectedAnswer=\{this.state.answer\}\
          answerOptions=\{this.state.answerOptions\}\
          questionId=\{this.state.questionId\}\
          question=\{this.state.question\}\
          questionTotal=\{quizQuestions.length\}\
          onAnswerSelected=\{this.handleAnswerSelected\}\
          correctAnswer=\{this.state.correctAnswer\}//<--Added in \
          onExplanation=\{this.handleExplanation\}//<--Added in\
        />\
      );\
    \}\
\
    renderResult() \{\
      return (\
        <Result quizResult=\{this.state.result\} />\
      );\
    \}\
\
\
    render() \{\
      return (\
        <React.Fragment>\
          <div>\
            \{/*should the quiz be displayed? if state.result has a value, then it will display the result */\}\
            \{this.state.result ? this.renderResult() : this.renderQuiz()\}\
          </div>\
\
          <Link to="/">Home</Link>\
        </React.Fragment>\
      )\
    \}\
  \}\
\
  export default Quiz;\
\
\
- - - - - \
Result.js\
\
import React from 'react';\
import PropTypes from 'prop-types';\
import \{ CSSTransitionGroup \} from 'react-transition-group';\
\
function Result(props) \{\
  return (\
    <CSSTransitionGroup\
      className="container result"\
      component="div"\
      transitionName="fade"\
      transitionEnterTimeout=\{800\}\
      transitionLeaveTimeout=\{500\}\
      transitionAppear\
      transitionAppearTimeout=\{500\}\
    >\
\
      <div>\
        You prefer <strong>\{props.quizResult\}</strong>!\
    </div>\
    </CSSTransitionGroup>\
  );\
\}\
\
Result.propTypes = \{\
  quizResult: PropTypes.string.isRequired,\
\};\
\
export default Result;\
\
- - - - -\
THIS NEXT FILE WAS IN Quizzes FOLDER, WHICH WAS WITHIN THE src FOLDER:\
Quizzes.js\
\
import React from 'react';\
import \{ Link \} from 'react-router-dom';\
\
\
class Quizzes extends React.Component \{\
  state = \{  \}\
  render() \{ \
    return ( \
      <React.Fragment>\
\
      <h1>Quiz</h1>\
\
      <Link to="/quiz" >Quiz</Link>\
\
\
\
      </React.Fragment>\
     );\
  \}\
\}\
 \
export default Quizzes;\
\
- - - - -\
THIS NEXT FILE WAS IN THE api FOLDER, WHICH WAS IN THE src FOLDER:\
quizQuestions.js\
\
import React from 'react';\
\
\
\
//changing key name "type" to "correct"(which will be true or false)\
var quizQuestions = [\
    \{\
        question: <img src=\{`$\{require('../images/photo-1511671782779-c97d3d27a1d4.jpeg')\}`\} alt="question_1" width="50%" height="50%" />,\
\
        explanation: "This is the explanation for the first question.",\
        \
\
        answers: [\
            \{\
                correct: "Microsoft", //"Microsoft"\
                content: "Halo"\
            \},\
            \{\
                correct: "Nintendo", //"Nintendo"\
                content: "Pokemon"\
            \},\
            \{\
                correct: "Sony", //"Sony"\
                content: "Uncharted"\
            \},\
        ]\
    \},\
    \{\
        question: "Which console would you prefer to play with friends?",\
        answers: [\
            \{\
                correct: "Microsoft",\
                content: "X-Box"\
            \},\
            \{\
                correct: "Nintendo",\
                content: "Nintendo 64"\
            \},\
            \{\
                correct: "Sony",\
                content: "Playstation 1"\
            \}\
        ]\
    \},\
    \
];\
\
export default quizQuestions;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\
}